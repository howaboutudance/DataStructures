Data Structures
Michelle Bergin
HW2

2.1, 2.2, 2.3, 2.7, 2.14, 2.15, 2.26, 2.28, 2.31

2.1)
	37 = bigO(1)
	√N
	NloglogN This before N confuses me. 
	N
	NlogN
	Nlog(N²) = 2Nlog(N) but for big O we don't need that pesky 2. So NlogN	
	Nlog²N
	N^1.5
	2^N/2
	N²logN 
	N²
	2^N
	N^3
	2/N I got this one wrong. I don't understand...

2.2)
	a

2.3)
	NlogN or N^1+∈/√logN
	Basically anything to the power of N in some shape or form is most likely going to grow faster than NlogN. 

2.7)
	a)
		1) N
		2) N²
		3) N^3
		4) N²
		5) N^5
		6) N^4
	b) File 2p7.txt for times
	c) Definitely the Otime was reflected in runtime

2.14)
	a) x = 3, f(x) = 4x^4 + 8x^3 + x + 2
		2 + 3(1 + 3(0 + 3(8 + 4∙3)))
		2 + 3(1 + 3(0 + 3(20)))
		2 + 3(1 + 3(0 + 60))
		2 + 3(1 + 180)
		2 + 3(181)
		2 + 543
		545
	
	b) The array is a holder for all the a(sub i's). Each of those are added to the amount of times that x is timesed. This also works inwards out just like the expansion. Which is why the for statement starts at n and not a typical 0.

	c) 2e-06 sec

2.15)
	bSearch.cc
	runtime with 1000 elements: 6.4e-05 sec 
	runtime with 10000 elements: 7.5e-05 sec
	runtime with 100000 elements: 7e-05 sec

2.26)
	2p26.cc

2.28)
	2p28.cc
	a) Max sum 4736524
	b) Max minus 160756
	c) Max times 14279686
	d) Max division 13592

2.31)
	It would NOT work. Ex, our list contains the number 2 and 4 and our search is of 3. <2, 4> target = 3.

	L (left) = 0 and our R (right) = 1
	M = 0

	is 2 < 3 (yes)
	L = M (L still equals 0)

	The problem is we would never actually get to the end. We need our L and R to cross so that we can break out of the loop. (I actually didn't realize this at first but I SHOULD have! I remember learning this already :/)
