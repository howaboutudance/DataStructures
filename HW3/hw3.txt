Michelle Bergin
Datastructures
HW3

3.1,3.2, 3.4, 3.5,3.6, 3.9, 3.10, 3.11, 3.22, 3.23, 3.29

3.1)
	Runtime was 0.000127 seconds
	Filename: 3p1.cc
	Also it prints whatever the first Link list specifies, but if those aren't in order, it still works.

3.2)
	Swap two adjacent elements by adjusting only the links (and not the data) using
	a) Singly linked list
		bool swap(Link &prev){
			if(current->next == nullptr)
				return false;
			prev->next = current->next;
			current->next->next = current->next;
			prev->next->next = current;
			return true;
		}

	b) Doubly linked list
		// Assumes always swap forward
		bool swap(Link&rhs){
			if(current->next == nullptr)
				return false;
			Node *temp = current->next->next;
			current->next->next->prev = current;
			current->prev->next = current->next;
			current->next->next = current;
			current->next->prev = current->prev;
			current->prev = current->next;
			current->next = temp;
		}

3.4)
	Filename: 3p4.cc
	Works:

	Below is our 'a' list before
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 

	Below is our 'b' list before
	0, 2, 4, 6, 8, 44, 

	Below is our 'c' unioned list
	0, 2, 4, 6, 8, 
	
3.5)
	Filename: 3p5.cc
	Works:  ...kinda...
	I am having trouble removing duplicates.
	
	Below is our 'a' list before
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 

	Below is our 'b' list before
	0, 2, 4, 6, 8, 44, 2, 

	Below is our 'c' unioned list
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 2, 4, 6, 8, 44, 2, 

3.6)
	Filename: 3p6.cc
	Also I have been trying to make my own josephus with a class player. It's been fun but as of writing this, my logic is wrong and it is not working :( sadface

3.9)
	Vector can be resized. Because of this, every time it needs more space, it doubles the size that it needs. To do this it makes a new vector! Which may or may not be in the previous location. 

3.10)
	class iterator{
		public:
			iterator()
				{}
			Object & operator*(){
			}
			iterator & operator++(){
			}
			
	};

3.11)
	a)
		int size(){
			int count;
			Node *p = head;
			while(p->next != null){
				count++;
				p = p->next;
			}
			return count;
		}

	b)
		print(){
			Node *p = head;
			while(p->next != null){
				cout << "p->data" << endl;
			}
		}

	c)
		bool isIn(Object &o){
			Node *p = head;
			while(p->next != null){
				if(o == p->data)
					return true;
			}
			return false;
		}

	d)
		bool(Object &o){
			if(!isIn(o)){
				push_front(o);
				return true;
			}
			return false;
		}

	e)
		bool(Object &o){
			Node *p = head;
			while(p->next == !null){
				if(p->data == o){
					
					return true;
				}
			}
			return false;
		}

3.22)
	3p22.cc
	Works:

	1 2 + 3 * 6 + 2 3 + / is the postfix expression
	3 is the answer

	9 5 3 + 2 4 ^ - + is the postfix expression
	1 is the answer

3.23)
	3p23.cc - not done. More than likely etc. etc.

3.29)

		Node *p = head;
		int iCounter = theSize - 1;
		for(int j = 0; j < theSize; j++){
			p = head;
			for(int i = iCounter; i >= 0; i--){
				if(i = 0){
					cout << p->data << " ";
					iCounter--;
					continue;
				}
				p = p->next;				
			}
		}
		cout << endl;
	
