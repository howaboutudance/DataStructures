DataStructures
HW2
Michelle Bergin
5.1, 5.2, 5.10, 5.13, 5.20, 5.27

5.1)
    Given input {4371, 1323, 6173, 4199, 4344, 9679, 1989} and a hash function
    h(x) = x (mod () 10), show the resulting
    a. separate chaining hash table
        4371
        6173 -- 1323
        4344
        9679 -- 4199 -- 1989

    b. hash table using linear probing
        0 | 9679
        1 | 4371
        2 | 1989
        3 | 1323
        4 | 6173
        5 | 4344
        6 |
        7 |
        8 |
        9 | 4199

    c. hash table using quadratic probing
                    path of 1989 
        
        0 | 9679 |     2 (2^0)
        1 | 4371 |
        2 | 1989 |     4 (2^3)
        3 | 1323 | 
        4 | 6173 |     3 (2^2)
        5 | 4344 |
        6 |      |
        7 |      |
        8 |      |
        9 | 4199 |     1 

    d. hash table with second hash function h 2 (x) = 7 âˆ’ (x mod 7)
        0 |
        1 | 4371
        2 | 9679
        3 | 1323
        4 | 4344
        5 |
        6 | 6173
        7 | 1989
        8 |
        9 | 4199

5.2)
    First hash will be all numbers in each added up and modded with 10. Ex 4 + 3 + 7 + 1 = 15 % 10 = 5
    Second hash is 10 - x mod 10

    ## FIRST ## (10/2 = 5)
        0 |
        1 |
        2 |
        3 | 4199
        4 | 
        5 | 4371
        6 | 4344
        7 | 6173
        8 |
        9 | 1323

    ## REHASH ## (23/2 = 11) First hash is same as before but % 22
    Second hash is 22 - x mod 22

        0  | 4199   12 | 
        1  |        13 | 9679
        2  |        14 | 
        3  |        15 | 4371
        4  |        16 | 
        5  | 1989   17 | 
        6  |        18 | 
        7  | 4344   19 | 6173
        8  |        20 | 
        9  | 1323   21 | 
        10 |        22 | 
        11 | 

5.10)
   Quadratic Probing is simpler and faster and eliminates primary clustering
   Quadratic has the problem of secondary clustering
   Linear Probing has the problem of primary clustering
    

5.13)
    poly.cc

5.20)
    

5.27)
    10111101, 00000010, 10011011, 10111110,
    01111111, 01010001, 10010110, 00001011, 
    11001111, 10011110, 11011011, 00101011, 
    01100001, 11110000, 01101111 
    into an initially empty extendible
    hashing data structure with M = 4

            1               0
        10111101        00000010
        10011011        01010001
        10111110        00001011
        10010110        01111111
        
============================================

    00          01          11          10
00000010    01010001    11001111    10111101
00001011    01111111                10011011
                                    10111110
                                    10010110

============================================

    000             001             010
00000010        00101011        01010001
00001011


    011             101             100
01111111        10111101        10011011
01100001        10111110        10010110
01101111                        10011110

    111             110
11110000        11001111
                11011011
